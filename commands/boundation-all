#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# prepare
repo=""
function finish {
	local message
	if test -z "$repo"; then
		message="boundation completed"
	else
		message="boundation failed on $repo"
	fi
	echo ''
	echo "$message"
}
trap finish EXIT

# npm workaround
# https://omrilotan.medium.com/npx-breaking-on-ci-b9f3f61d4676
export npm_config_yes=true

# user
user="bevry" # "docpad"
skip="envfile typechecker projectz pluginclerk links caterpillar hooks getcontributors getmembers getrepos github-commit cson dorothy pluginloader lazy-require make-deno-edition boundation awesome-crypto base billing bindsource designs discourse discourse-component-youtubetimestamps discourser dotfiles fountain gitclone-robust legal macos-getplaytime meetings nextjs-auth0-fauna staticsitegenerators-list staticsitegenerators-website study terraform-scaleway-hashistack testen textandbinaryextensions timezone-converter workers youtube ${*:2}"
start="${1-}"
matches="" # "-plugin-"

# local
if test -z "$start"; then
	ready='yes'
else
	ready='no'
fi

# use a file at fd 3, as otherwise the repos will be passed as stdin into boundation
# http://mywiki.wooledge.org/BashFAQ/089
# https://stackoverflow.com/a/8334759/130638
f="$(mktemp)"
fetch "https://bevry.me/api/github/repos/${user}" | json -a >"$f"

echo '' >list.txt
while read -r slug <&3; do
	repo="${slug#*/}"
	if test "$repo" = "$start"; then
		echo "now ready after $repo"
		ready='yes'
	fi
	if test "$ready" = "yes"; then
		# does repo exist within skip
		if [[ " $skip " == *" $repo "* ]]; then
			echo "skipping $repo"

		# does matches exist within repo
		elif test -z "$matches" || [[ "$repo" == *"$matches"* ]]; then
			echo ''
			echo "upgrading $repo"
			rm -Rf "$repo" || :
			gh repo clone "$slug"
			cd "$repo" || exit
			echo "'$(npm view . name)': '$(npm view . version)'," >>../list.txt
			boundation-upgrade --auto --lts
			cd .. || exit
			rm -Rf "$repo"
			echo ''
		else
			echo "ignoring $repo"
		fi
	else
		echo "skipping $repo"
	fi
done 3<"$f"

repo=""
