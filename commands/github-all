#!/usr/bin/env bash

function github_all() (
	source "$DOROTHY/sources/bash.bash"

	# if the secrets aren't provided, fetch them and reload
	if test -z "${GITHUB_ACCESS_TOKEN-}"; then
		github-auth -- "$0" "$@"
		return
	fi

	# =====================================
	# Helpers

	function fetch_all_repos {
		fetch 'https://bevry.me/api/github/repos' | jq -r '.[]'
	}

	function fetch_package_data {
		local slug="$1"
		fetch "https://raw.githubusercontent.com/${slug}/HEAD/package.json" 2>/dev/null
	}

	function fetch_backers {
		local slug="$1"
		sponsors="$(fetch_package_data "$slug" | jq -r '.backers[]' 2>/dev/null || :)"
		if test -z "$sponsors"; then
			echo-element --openclose="$slug"
		else
			echo-element --open="$slug"
			print_line "$sponsors"
			echo-element --close="$slug"
			open "https://github.com/$slug"
		fi
	}

	# enable auto-merge
	function enable_auto_merge {
		local slug="$1"
		gh repo edit "$slug" --enable-auto-merge --enable-rebase-merge --enable-squash-merge || :
	}

	# correct npm owners
	local whoami=''
	function correct_npm_owners {
		local slug="$1" packageName owners owner need_access_change
		if test -z "$whoami"; then
			whoami="$(npm whoami owners)"
		fi
		packageName="$(fetch_package_data "$slug" | jq -r '.name' || :)"
		if test -n "$packageName" -a "$packageName" != 'templatebinding'; then
			owners="$(npm owner ls "$packageName" 2>/dev/null || :)"
			if test -n "$owners"; then
				print_line "$owners"
				if grep --quiet --fixed-strings --regexp="$whoami" <<<"$owners"; then
					npm owner add bevryme "$packageName"
					npm access grant read-write bevry:developers "$packageName" || :
					npm access grant read-only bevry:maintainers "$packageName" || :
					if [[ $slug == *docpad* ]]; then
						npm access grant read-only docpad:maintainers "$packageName" || :
					fi
					need_access_change='no'
					while read -r owner <&5; do
						owner="${owner%% *}" # get everything before the first space
						if test "$owner" != 'bevryme'; then
							need_access_change='yes'
							break
							# npm owner rm "$owner" "$packageName"  || :
						fi
					done 5< <(print_line "$owners")
					if test "$need_access_change" = 'yes'; then
						open "https://www.npmjs.com/package/$package/access"
					fi
					# ignore error on this, as if it is already set, it returns E401
					npm access set mfa=automation "$packageName" 2>/dev/null || :
				fi
			fi
		fi
	}

	# recreate all dependabot PRs
	function recreate_dependabot_prs {
		local slug="$1" pr
		while read -r pr <&5; do
			# gh pr comment "$pr" --body '@dependabot recreate'
			gh pr close "$pr" --repo "$slug" &
		done 5< <(gh pr list --repo "$slug" --app 'dependabot' --json url | jq -r '.[].url')
	}

	# close all dependabot actions
	function close_all_dependabot_actions {
		local slug="$1" run
		while read -r run <&5; do
			gh run cancel "$run" --repo "$slug" &
		done 5< <(gh run list --status 'queued' --user dependabot --repo "$slug" --json databaseId | jq -r '.[].databaseId')
	}

	# =====================================
	# Prepare

	# defaults slugs to all our slugs
	local slugs=()
	if test "$#" -eq 0; then
		mapfile -t slugs < <(fetch_all_repos)
	else
		slugs=("$@")
		shift $#
	fi

	# =====================================
	# Action

	local slug
	for slug in "${slugs[@]}"; do
		fetch_backers "$slug"
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	github_all "$@"
fi
