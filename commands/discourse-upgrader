#!/usr/bin/env bash

function discourse_setup() (
	# Load Dorothy's sensible defaults
	eval "$(curl -fsSL "https://raw.githubusercontent.com/bevry/dorothy/HEAD/sources/bash.bash")"

	# see commands/command-missing for details
	function __command_missing {
		local command commands=("$@")
		for command in "${commands[@]}"; do
			if type -P "$command" &>/dev/null; then
				continue
			else
				return 0 # command missing
			fi
		done
		return 1 # all commands are present
	}

	# see commands/command_exists for details
	function __command_exists {
		local command commands=("$@")
		for command in "${commands[@]}"; do
			if type -P "$command" &>/dev/null; then
				continue
			else
				return 1 # command missing
			fi
		done
		return 0 # all commands are present
	}

	# Receive arguments from caller
	if test -z "${SSH_FILE_INTERNAL-}" -o -z "${SSH_PASS_INTERNAL-}"; then
		print_line 'For automatic SSH password insertion, you must pass the SSH file and password.' >/dev/stderr
	fi

	# Check discourse is already setup
	if ! test -d /var/discourse; then
		print_line 'Run this command on the remote discourse server' >/dev/stderr
		exit 1
	fi

	print_line 'Configuring dependencies...'
	# Remove old dependencies
	apt-get remove -y certbot
	# Update existing dependencies
	apt-get update -y
	apt-get upgrade -y
	# Add new dependencies
	apt-get install -y wget git
	# Purge unused dependencies
	apt-get autoremove -y

	# SSH Keys
	print_line 'Configuring SSH keys...'
	# Ensure essentials
	mkdir -p "$HOME/.ssh"
	# Replace known hosts with GitHub's SSH keys
	ssh-keyscan -t rsa github.com >"$HOME/.ssh/known_hosts"
	# Load our SSH Agent
	eval "$(ssh-agent -s)"
	# Save Configuration File
	cat <<-EOF >"$HOME/.ssh/config"
		# generic settings
		UserKnownHostsFile ~/.ssh/known_hosts
		IgnoreUnknown UseKeychain,AddKeysToAgent,IdentitiesOnly
		UseKeychain yes
		AddKeysToAgent yes

		# identities
		IdentityFile ~/.ssh/$SSH_FILE_INTERNAL
	EOF
	# Fix Permissions
	chmod --recursive a-xrw,u+Xrw "$HOME/.ssh"
	# Load our SSH Key: https://stackoverflow.com/a/52671286/130638
	if test -n "${SSH_PASS_INTERNAL-}"; then
		ssh_stdin_pass_helper="$HOME/ssh_stdin_password.bash"
		cat <<-EOF >"$ssh_stdin_pass_helper"
			#!/usr/bin/env bash
			read secret
			echo \$secret
		EOF
		chmod +x "$ssh_stdin_pass_helper"

		print_line 'Adding the SSH keys...'
		DISPLAY=:0 SSH_ASKPASS="$ssh_stdin_pass_helper" ssh-add "$SSH_FILE_INTERNAL" <<<"$SSH_PASS_INTERNAL"
	elif test -n "${SSH_FILE_INTERNAL-}"; then
		ssh-add "$SSH_FILE_INTERNAL"
	fi

	# Install snap
	if __command_missing snap; then
		print_line 'Configuring snap...'
		apt-get install -y snapd
	fi

	# Install certbot
	if __command_missing certbot; then
		print_line 'Configuring certbot...'
		snap install --classic certbot
		ln -s /snap/bin/certbot /usr/bin/certbot
	fi

	# Install docker
	if __command_missing docker; then
		print_line 'Configuring docker...'
		apt-get install -y docker.io
	fi

	# Install discourse
	if test ! -e /var/discourse; then
		print_line 'Configuring discourse...'
		git clone https://github.com/discourse/discourse_docker.git /var/discourse
	fi
	chmod o-rwx /var/discourse/containers/app.yml

	# Install configuration
	if test ! -e /.git; then
		print_line 'Configuring remote configuration...'
		local REMOTE='git@github.com:bevry/discourse.git' BRANCH='bevry'
		cd /
		git init
		git remote add origin "$REMOTE"
		git fetch origin
		git checkout "$BRANCH"
		git pull origin "$BRANCH"
	fi

	# Cron
	print_line 'Configuring cron...'
	# Always update cron job file with the latest
	discourse_cron_script="$HOME/discourse_cron.bash"
	cat <<-EOF >"$discourse_cron_script"
		#!/usr/bin/env bash
		set -Eeuo pipefail
		docker image prune --force --all --filter "until=28h"
		cd /var/discourse
		git pull origin "\$(git rev-parse --abbrev-ref HEAD)"
		/var/discourse/launcher rebuild app
	EOF
	chmod +x "$discourse_cron_script"
	# Check if the cron job file is actually used
	while ! (crontab -l | grep --quiet --fixed-strings --regexp="$discourse_cron_script"); do
		cat <<-EOF
			CRON JOB DOES NOT EXIST FOR UPGRADING DISCOURSE
			COPY THE BELOW INTO THE PROMPT AND SAVE

			# at midnight each day, upgrade the discourse forum
			0 0 * * * $discourse_cron_script
		EOF
		read -r -n 1 -p 'ARE YOU READY?'
		env EDITOR='/bin/nano' crontab -e
	done

	print_line 'Trimming unused Docker images to free up space...'
	docker ps -a
	docker image list
	docker image prune --force --all --filter "until=28h"
	docker image list

	print_line 'Updating remote configuration...'
	cd /
	git fetch origin
	git pull origin "$(git rev-parse --abbrev-ref HEAD)" # master -> main switches can bust things, so that code figured out the right branch

	print_line 'Updating the discourse docker setup...'
	cd /var/discourse
	git pull origin "$(git rev-parse --abbrev-ref HEAD)" # master -> main switches can bust things, so that code figured out the right branch

	print_line 'Rebuilding the discourse docker instance...'
	/var/discourse/launcher rebuild app
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	discourse_setup "$@"
fi
