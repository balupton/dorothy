#!/usr/bin/env bash

function discourse_setup() (
	# Load Dorothy's sensible defaults
	eval "$(curl -fsSL 'https://raw.githubusercontent.com/bevry/dorothy/HEAD/sources/bash.bash')"

	# see commands/command-missing for details
	function __command_missing {
		local command commands=("$@")
		for command in "${commands[@]}"; do
			if type -P "$command" &>/dev/null; then
				continue
			else
				return 0 # command missing
			fi
		done
		return 1 # all commands are present
	}

	# see commands/command_exists for details
	function __command_exists {
		local command commands=("$@")
		for command in "${commands[@]}"; do
			if type -P "$command" &>/dev/null; then
				continue
			else
				return 1 # command missing
			fi
		done
		return 0 # all commands are present
	}

	# Receive arguments from caller
	if test -z "${SSH_KEY_INTERNAL-}" -o -z "${SSH_PASS_INTERNAL-}" -o -z "${DISCOURSE_CONFIGURATION_REMOTE-}" -o -z "${DISCOURSE_CONFIGURATION_BRANCH-}"; then
		print_line '[discourse-setup] is to be run via [commands/discourse]' >/dev/stderr
		return 1
	fi

	print_line 'Configuring dependencies...'
	# Remove old dependencies
	sudo apt-get remove -y certbot
	# Update existing dependencies
	sudo apt-get update -y
	sudo apt-get upgrade -y
	# Add new dependencies
	sudo apt-get install -y wget git
	# Purge unused dependencies
	sudo apt-get autoremove -y

	# # SSH Keys
	# print_line 'Configuring SSH keys...'
	# # Ensure essentials
	# mkdir -p "$HOME/.ssh"
	# # Replace known hosts with GitHub's SSH keys
	# ssh-keyscan -t rsa github.com >"$HOME/.ssh/known_hosts"
	# # Load our SSH Agent
	# eval "$(ssh-agent -s)"
	# # Save Configuration File
	# if test ! -e "$HOME/.ssh/config"; then
	# 	cat <<-EOF >"$HOME/.ssh/config"
	# 		# Configuration
	# 		UserKnownHostsFile ~/.ssh/known_hosts
	# 		IgnoreUnknown UseKeychain,AddKeysToAgent,IdentitiesOnly
	# 		UseKeychain yes
	# 		AddKeysToAgent yes

	# 		# Fallback
	# 		IdentityFile ~/.ssh/$SSH_KEY_INTERNAL
	# 	EOF
	# fi
	# # Fix Permissions
	# chmod --recursive a-xrw,u+Xrw "$HOME/.ssh"
	# # Load our SSH Key: https://stackoverflow.com/a/52671286/130638
	# if test -n "${SSH_PASS_INTERNAL-}"; then
	# 	ssh_stdin_pass_helper="$HOME/ssh_stdin_password.bash"
	# 	cat <<-EOF >"$ssh_stdin_pass_helper"
	# 		#!/usr/bin/env bash
	# 		read secret
	# 		echo \$secret
	# 	EOF
	# 	chmod +x "$ssh_stdin_pass_helper"

	# 	print_line 'Adding the SSH keys...'
	# 	DISPLAY=:0 SSH_ASKPASS="$ssh_stdin_pass_helper" ssh-add "$HOME/.ssh/$SSH_KEY_INTERNAL" <<<"$SSH_PASS_INTERNAL"
	# elif test -n "${SSH_KEY_INTERNAL-}"; then
	# 	ssh-add "$HOME/.ssh/$SSH_KEY_INTERNAL"
	# fi

	# Install certbot
	if __command_missing certbot; then
		# fuse necessary due to: error: system does not fully support snapd: The "fuse" filesystem is required on this system but not available. Please try to install the fuse package.
		print_line 'Configuring snap...'
		sudo apt-get install -y fuse snapd

		print_line 'Configuring certbot...'
		sudo snap install --classic certbot
		sudo ln -s /snap/bin/certbot /usr/bin/certbot
	fi

	# Install docker
	if __command_missing docker; then
		print_line 'Configuring docker...'
		sudo apt-get install -y docker.io
	fi

	# Install discourse
	print_line 'Configuring discourse...'
	if test ! -e /var/discourse; then
		sudo mkdir -p -m 'a-xrw,u+Xrw' /var/discourse
		sudo chown "$USER:" /var/discourse
		cd /var/discourse
		git init
		git config pull.ff only
		git remote add origin 'https://github.com/discourse/discourse_docker.git'
		git fetch origin
		git checkout main
		git pull origin main --force --ff-only
	else
		cd /var/discourse
		git pull origin main --force --ff-only
	fi

	# Install configuration
	print_line 'Configuring instance...'
	# if test ! -e /.git; then
	# 	sudo mkdir -p -m 'a-xrw,u+Xrw' /var/discourse
	# 	sudo chown "$USER:" /var/discourse
	# 	cd /
	# 	git init
	# 	git remote add origin "$DISCOURSE_CONFIGURATION_REMOTE"
	# 	git fetch origin
	# 	git checkout "$DISCOURSE_CONFIGURATION_BRANCH"
	# 	git pull origin "$DISCOURSE_CONFIGURATION_BRANCH"
	# else
	# 	cd /
	# 	git fetch origin
	# 	git pull origin master
	# fi
	if test ! -e "/var/discourse/containers/${DISCOURSE_CONTAINER}.yml"; then
		vim "/var/discourse/containers/${DISCOURSE_CONTAINER}.yml"
	fi
	chmod --recursive 'o-rwx,u+X' /var/discourse/containers

	# Trim unused/style images to free up space
	print_line 'Pruning docker...'
	sudo docker ps -a
	sudo docker image list
	sudo docker image prune --force --all --filter 'until=28h'
	sudo docker image list

	# Build the app
	print_line 'Building instance...'
	sudo apt-get install -y tmux
	tmux -c "sudo /var/discourse/launcher rebuild $DISCOURSE_CONTAINER; exit \$?"

	# # Cron
	# print_line 'Configuring cron...'
	# # Always update cron job file with the latest
	# local discourse_cron_script
	# discourse_cron_script="$HOME/discourse_cron.bash"
	# cat <<-EOF >"$discourse_cron_script"
	# 	#!/usr/bin/env bash
	# 	set -Eeuo pipefail
	# 	docker image prune --force --all --filter "until=28h"
	# 	cd /var/discourse
	# 	git pull origin "\$(git rev-parse --abbrev-ref HEAD)"
	# 	/var/discourse/launcher rebuild app
	# EOF
	# chmod +x "$discourse_cron_script"
	# # Check if the cron job file is actually used
	# while ! (crontab -l | grep --quiet --fixed-strings --regexp="$discourse_cron_script"); do
	# 	cat <<-EOF
	# 		CRON JOB DOES NOT EXIST FOR UPGRADING DISCOURSE
	# 		COPY THE BELOW INTO THE PROMPT AND SAVE

	# 		# at midnight each day, upgrade the discourse forum
	# 		0 0 * * * $discourse_cron_script
	# 	EOF
	# 	read -r -n 1 -p 'ARE YOU READY?'
	# 	env EDITOR='/bin/nano' crontab -e
	# done
)

# always fire
discourse_setup "$@"
