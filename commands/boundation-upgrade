#!/usr/bin/env bash

function boundation_upgrade() (
	source "$DOROTHY/sources/bash.bash"

	# if the secrets aren't provided, fetch them and reload
	if test -z "${GITHUB_ACCESS_TOKEN-}"; then
		bevry-auth -- "$0" "$@"
		return
	fi

	# prepare
	local name slug UPGRADE_SUCCESS
	name="$(jq -r '.name' package.json)"
	slug="$(jq -r '.badges.config.githubSlug' package.json)"
	UPGRADE_SUCCESS='no'
	function on_finish {
		if test "$UPGRADE_SUCCESS" = 'yes'; then
			message="boundation-upgrade completed on $name"
		else
			message="boundation-upgrade failed on $name"
			if ! is-ssh; then
				say "$message"
			fi
		fi
		print_line
		print_line "$message"
	}
	trap on_finish EXIT

	# helpers
	function get_node_engine {
		grep --after-context=1 --fixed-strings --regexp='engines' <package.json |
			grep --fixed-strings --regexp='node' |
			head -n1 |
			xargs
	}
	function get_node_license {
		jq -r '.license' package.json
	}

	# fetch original values
	local eo lo
	eo="$(get_node_engine)"
	lo="$(get_node_license)"

	# install boundation
	if ! command-exists boundation; then
		nvm-env npm i -g boundation
	fi

	# install deps and make deno edition
	# as boundation no longer tries
	nvm-env -- npm i --force
	npx make-deno-edition --attempt || :

	# keep going
	# workaround for now, with support for binaryextensions
	# r="$(jq -r '.boundation.nodeVersionsTestedRange' package.json || print_line)"
	# if is-value "$r"; then
	# 	if [[ "$r" == *'<16'* ]]; then
	# 		print_line 'custom nodeVersionsTestedRange is okay'
	# 	else
	# 		nr='10 || 12 || 14'
	# 		say "OVERWROTE nodeVersionsTestedRange on $name"
	# 		print_line "OVERWROTE nodeVersionsTestedRange on $name"
	# 		print_line "from:  $r"
	# 		print_line "to:    $nr"
	# 		r="$nr"
	# 	fi
	# else
	# 	r="<16"
	# fi
	# boundation --nodeVersionsTestedRange="$r" "$@"
	local message
	# local banner=$'\n=======================\n'
	nvm-env boundation --auto --expandNodeVersions "$@" || {
		message="failed to expand support on $name"
		say "$message"
		return 1

		# message="failed to continue support on $name, enabling shrinking to mark failed unsupported test versions as optional"
		# say "$message"
		# echo-style --notice="$banner$message$banner"
		# confirm --ppid=$$ -- 'Proceed?'

		# git reset --hard
		# git clean -f
		# nvm-env boundation --auto --expandNodeVersions --shrinkNodeVersions "$@" || {
		# 	message="failed to conintue support on $name for existing node versions, enabling shrinking to maintained node versions"
		# 	say "$message"
		# 	echo-style --notice="$banner$message$banner"
		# 	confirm --ppid=$$ -- 'Proceed?'

		# 	git reset --hard
		# 	git clean -f
		# 	nvm-env boundation --auto --maintainedNodeVersions --expandNodeVersions --shrinkNodeVersions "$@" || {
		# 		message="failed to shrink support on $name to maintained node versions"
		# 		say "$message"
		# 		echo-style --error="$banner$message$banner"

		# 		return 1
		# 	}
		# }
	}

	# fetch updated values
	local en ln
	en="$(get_node_engine)"
	ln="$(get_node_license)"

	# compare values
	local ec lc change
	ec=''
	lc=''
	change='minor'
	if test "$lo" != "$ln"; then
		if test "$ln" = 'RPL-1.5'; then
			change='major'
		fi
		lc="-   Updated license from [\`$lo\`](http://spdx.org/licenses/$lo.html) to [\`$ln\`](http://spdx.org/licenses/$ln.html)
"
	fi
	if test "$eo" != "$en"; then
		change='major'
		ec="-   Minimum required Node.js version changed from \`$eo\` to \`$en\` adapting to ecosystem changes
"
	fi

	# prettify history.md
	nvm-env npx prettier HISTORY.md --write

	# update version
	v="$(nvm-env npm version "${change}" --git-tag-version=false)"
	d="$(date +"%Y %B %-d")"
	t="$(tail -n +3 HISTORY.md)"
	n="$(
		cat <<-EOF
			## $v $d

			-   Updated dependencies, [base files](https://github.com/bevry/base), and [editions](https://editions.bevry.me) using [boundation](https://github.com/bevry/boundation)
			$lc$ec
		EOF
	)"
	cat <<-EOF >HISTORY.md
		# History

		$n
		$t
	EOF
	nvm-env -- npx prettier HISTORY.md --write

	# log
	echo-segment --h2='changelog'
	bat -P <<<"$n"
	echo-segment --g1='changelog'

	# prepare
	nvm-env npm run our:meta

	# release
	git rm -rf docs || :
	git add .
	git commit -am "$v - boundation, changelog, version bump"
	# if ! nvm-env npm owner add bevryme; then
	# 	print_line 'adding npm owner failed, trying again in two minutes'
	# 	sleep 2m
	# 	nvm-env npm owner add bevryme
	# fi
	nvm-env npm run our:release

	# wait for the release to push
	waiter 15

	# wait for the publish to finish
	local run_id_of_release
	while read -r run_id_of_release <&172; do
		if test -z "$run_id_of_release"; then
			break
		fi
		while true; do
			gh run watch "$run_id_of_release" --exit-status --repo "$slug" && break
			gh run rerun "$run_id_of_release" --failed --repo "$slug"
		done
	done 172< <(gh run list --json status,databaseId --repo "$slug" | jq -r '.[] | select(.status != "completed") | .databaseId')

	# all done
	UPGRADE_SUCCESS='yes'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	boundation_upgrade "$@"
fi
