#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# check user config
varfile="$DOROTHY/user/env/share.bash"
if test -f "$varfile"; then
	source "$varfile"
fi
if test -z "${SHARE_USER-}" -o -z "${SHARE_GROUP-}"; then
	stderr echo 'USAGE: env SHARE_USER=<user> SHARE_GROUP=<group> mount-vaults'
	exit 1
fi

gc="$(which gocryptfs)"
echo "gocrypt: $gc"

function mount_vault {
	local mount_source="$1"
	local mount_target="$2"

	sudo umount -l "$mount_target" || echo 'already unmounted'

	mkdir -p "$mount_target"
	env user="$SHARE_USER" group="$SHARE_GROUP" fix-permissions "$mount_target"

	echo 'Enter the cipher password for:'
	echo "$mount_source => $mount_target"

	if is-mac; then
		gocryptfs "$mount_source" "$mount_target"
	elif is-ubuntu; then
		sudo -H -u "$SHARE_USER" "$gc" -noprealloc -allow_other -force_owner "$(uid "$SHARE_USER"):$(gid "$SHARE_GROUP")" "$mount_source" "$mount_target"
	else
		stderr echo 'unsupported operating system'
		exit 1
	fi

	# verify permissions
	r="$mount_target/random-$(rand)"
	touch "$r"
	ls -la "$r"
	rm "$r"

	# fix permissions
	env user="$SHARE_USER" group="$SHARE_GROUP" fix-permissions "$mount_target"

	# restart samba
	sudo systemctl restart smbd
}

function mount_vaults {
	local previous_item=''
	for item in "$@"; do
		if test -z "$previous_item"; then
			previous_item="$item"
		else
			mount_vault "$previous_item" "$item"
			previous_item=''
		fi
	done
}

if test "$#" -ne 0; then
	mount_vaults "$@"
elif test -f "$DOROTHY/user/env/mount-locations.bash"; then
	source "$DOROTHY/user/env/mount-locations.bash"
	mount_vaults "${MOUNT_VAULTS[@]}"
else
	stderr echo 'USAGE: mount-vaults "/source" "/target" ..."'
fi
